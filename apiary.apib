FORMAT: 1A
HOST: http://localhost:3000

# @valorad/inventory

高仿SkyUI 5的Angular物品栏. An Inventory highly resembles SkyUI5 .

# Group Actors
玩家操作提供了Graph，只有在Graph中的操作为多数据集的操作，其余为单数据集操作。

## Router Index [/api/actors/]

包括：
- 获取所有玩家(无条件 无投影 无分类)
- 增加玩家
- 修改玩家

### Get all actors  [GET]
+ Response 200 (application/json)

        [
          {
            "_id": "5abf508ffbce38654fd3ef9e",
            "dbname": "actor-valorad",
            "icon": ""
          },
          {
            "_id": "5ae475bdb2dcbd017c4eda6f",
            "dbname": "actor-testy"
          }
        ]

### Add a new Actor  [POST]

+ Request (application/json)

        {
          "dbname": "actor-olaf"
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new actor \"actor-olaf\" with id \"5addb4aedd194218735485e5\"",
          "status": "success",
          "id": "5addb4aedd194218735485e5"
        },
        {
          "message": "Failed to create actor \"actor-olaf\" ",
          "status": "failure",
          "id": null
        }

### Update actors  [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "dbname": "actor-valorad"
          },
          "token": {
            "icon": "/mnt/c/windows/system32/reg32.d1l"
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated selected actors",
          "status": "success",
          "altCount": 2
        }
        {
          "message": "Failed to update selected actors",
          "status": "failure",
          "altCount": 0
        }


## GraphQL [/api/actor/graph]

玩家的增加、删除与查询。使用graphql，会涉及多个数据集

### 【查】List all actors  [POST]
根据条件查询玩家，返回列表

+ Request (application/json)

        {
          "graphql_Exp": "query getActors($conditions: JSON, $page: Int, $lang: String) { actors: actors(conditions: $conditions, page: $page, lang: $lang) { dbname, icon, equiped, name, biography }}",
          "graphql_Arg": { }
        }

+ Response 200 (application/json)

        {
          "data": {
            "actors": [
              {
                "dbname": "actor-testy",
                "icon": "path/to/avatar.jpg",
                "equiped": {
                  "body": ObjectId,
                  "head": ObjectId,
                  "back": ObjectId,
                  "heart": ObjectId,
                  "foot": ObjectId
                },
                "name": "测试人员",
                "biography": "测试人员A"
              }
            ]
          }
        }
        
### 【查】Get an actor  [POST]
根据条件查询玩家，返回单个玩家

+ Request (application/json)

        {
          "graphql_Exp": "query getActor($dbname: String, $lang: String) { actor: actor(dbname: $dbname, lang: $lang) { dbname, icon, equiped, name, biography, } }",
          "graphql_Arg": {
            "dbname": "actor-testy",
            "lang": "zh"
          }
        }

+ Response 200 (application/json)

        {
          "data": {
            "actor": {
              "dbname": "actor-testy",
              "icon": null,
              "equiped": {},
              "name": "测妈妈",
              "biography": "测妈妈"
            }
          }
        }

### 【增】Add a new actor [POST]

增加玩家

+ Request (application/json)

        {
          "graphql_Exp": "mutation addActor($info: newActor!) { add(input: $info) { message, status, id } } ",
          "graphql_Arg": {
            "info": {
              "dbname": "actor-testy",
              "translations": {
                "name": "{\"en\": \"testy\",\"zh\": \"测妈妈\"}",
                "biography": "{\"en\": \"testy\",\"zh\": \"测妈妈\"}"
              }
            }
          }
        }

+ Response 200 (application/json)

        {
          "data": {
            "add": {
              "message": "Successfully created new actor \"actor-testy\" with id \"5adc50f75e7ec335a59cffd9\"",
              "status": "success",
              "id": "5adc50f75e7ec335a59cffd9"
            }
          }
        },
        
        {
          "data": {
            "add": null
          },
          "errors": [
            {
              "message": "Unexpected token e in JSON at position 1",
              "locations": [
                {
                  "line": 10,
                  "column": 3
                }
              ],
              "path": [
                "add"
              ]
            }
          ]
        }
        
### 【删】Delete actors [POST]
删除指定条件的玩家。警告：设置条件为"{}"将删除所有玩家！

+ Request (application/json)

        {
          "graphql_Exp": "mutation deleteActor($conditions: JSON!) { delete(conditions: $conditions) { message, status, rmCount } } ",
          "graphql_Arg": {
            "conditions": "{\"dbname\": \"actor-testy\"}"
          }
        }

+ Response 200 (application/json)

        {
          "data": {
            "delete": {
              "message": "Succesfully deleted selected actors",
              "status": "success",
              "rmCount": 1
            }
          }
        }


## dbname [/api/actors/dbname/{dbname}]

按*dbname*查找玩家信息，返回单个玩家

### Get an actor by dbname  [GET]
+ Response 200 (application/json)


        {
          "_id": "5add8f6fdd194218735485e3",
          "dbname": "actor-testy"
        }

### Delete an actor by dbname  [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted actor \"actor-olaf\"",
          "status": "success",
          "rmCount": 1
        },
        {
          "message": "Failed to delete actor \"actor-olaf\" ",
          "status": "failure",
          "rmCount": 0
        }

# Group Base-items
基础物品信息操作。提供了Graph，只有在Graph中的操作为多数据集的操作，其余为单数据集操作。

## Router Index [/api/baseItems/]
包括：
- 获取所有物品基础信息(无条件 无投影 无分类)
- 增加物品基础信息
- 修改物品基础信息

### Get all base-items  [GET]
+ Response 200 (application/json)

        [
          {
            "weight": 10,
            "value": 100,
            "_id": "5adec3331441e2280493ec53",
            "dbname": "item-iron_helmet",
            "category": "gears",
          },
          {
            "weight": 15.8,
            "value": 650,
            "_id": "5ae522cd603a66102fae0840",
            "dbname": "item-weapon-dragonbone_greatsword",
            "category": "gears",
          }
        ]

### add a base-item  [POST]

+ Request (application/json)

        {
          "dbname": "item-weapon-dragonbone_greatsword",
          "category": "gears",
          "weight": 15.8,
          "value": 650
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new base-item \"item-weapon-dragonbone_greatsword\" with id \"5ae522cd603a66102fae0840\"",
          "status": "success",
          "id": "5ae522cd603a66102fae0840"
        }
        {
          "message": "Failed to create base-item \"item-weapon-dragonbone_greatsword\" with id \"5ae522cd603a66102fae0840\"",
          "status": "failure",
          "id": null
        }

### update base-items  [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "dbname": "item-weapon-dragonbone_greatsword"
          },
          "token": {
            "$set": {
              "value": 998
            }
          }
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated selected base-items",
          "status": "success",
          "altCount": 3
        }

        {
          "message": "Failed to update selected base-items",
          "status": "failure",
          "altCount": 0
        }
        


        
## GraphQL [/api/baseItems/graph]

增加、删除与查询玩家的物品栏。使用graphql，会涉及多个数据集。

### 【查】Get base-item list  [POST]
根据条件查询物品基本信息，返回列表

+ Request (application/json)

        {
            "graphql_Exp": "query getItems($conditions: JSON, $page: Int, $lang: String) { baseItems: baseItems(conditions: $conditions, page: $page, lang: $lang) { dbname, name, description, value, weight, category, detail { rating, typeName, equipI18n { name, equip }, effectsI18n { name, effect }, contentDetail } } }",
            "graphql_Arg": {
              "lang": "zh",
              "conditions": "{\"dbname\": \"item-stimpack\"}"
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "baseItems": [
              {
                "dbname": "item-stimpack",
                "name": "治疗针",
                "description": "",
                "value": 110,
                "weight": 1,
                "category": "consumables",
                "detail": {
                "rating": null,
                "typeName": null,
                "equipI18n": null,
                "effectsI18n": [
                  {
                    "name": "Restore health",
                    "effect": "effect-resotre_health"
                  }
                ],
                "contentDetail": null
                }
              }
            ]
          }
        }
        
### 【查】Get a base-item  [POST]
查询单个物品基本信息，返回单件物品

+ Request (application/json)

        {
            "graphql_Exp": "query getItem($dbname: String, $lang: String) { baseItem: baseItem(dbname: $dbname, lang: $lang) { dbname, name, description, value, weight, category, detail { rating, typeName, equipI18n { name, equip }, effectsI18n { name, effect }, contentDetail } } }",
            "graphql_Arg": {
              "dbname": "item-stimpack"
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "baseItem": {
              "dbname": "item-stimpack",
              "name": "Stimpack",
              "description": "",
              "value": 110,
              "weight": 1,
              "category": "consumables",
              "detail": {
                "rating": null,
                "typeName": "Potions",
                "effectsI18n": [
                  {
                    "name": "Restore health",
                    "effect": "effect-resotre_health"
                  }
                ],
                "contentDetail": null
              }
            }
          }
        }
        
### 【增】Add a base-item  [POST]
增加一个新物品信息

+ Request (application/json)

        {
            "graphql_Exp": "mutation createItem($input: newBaseItem!) { add: add(input: $input) { message, status, id } }",
            "graphql_Arg": {
              "input": {
                "dbname": "item-iron_helmet",
                "value": 100,
                "weight": 10,
                "category": "gears",
                "translations": {
                  "name": "{\"en\": \"Iron helmet\", \"zh\": \"铁制头盔\"}"
                },
                "detail": {
                  "rating": 10,
                  "type": "type-heavy_armor",
                  "equip": "equip-head"
                }
              }
            }

        }

+ Response 200 (application/json)

        {
          "data": {
            "add": {
              "message": "Successfully created new baseItem \"item-iron_helmet\" with id \"5adeba4ef790322434dd6af7\"",
              "status": "success",
              "id": "5adeba4ef790322434dd6af7"
            }
          }
        }

        
### 【删】Delete base-items [POST]
删除满足条件的物品信息

+ Request (application/json)

        {
            "graphql_Exp": "mutation deleteItem($conditions: JSON) { delete: delete(conditions: $conditions) { message, status, rmCount } }",
            "graphql_Arg": {
                "conditions": "{\"dbname\": \"item-iron_helmet\"}"
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "delete": {
              "message": "Successfully deleted selected baseItems",
              "status": "success",
              "rmCount": 1
            }
          }
        }

## dbname query [/api/baseItems/dbname/{dbname}]
按照*dbname*查询一个物品的基础信息

### Get a base-item  [GET]

+ Response 200 (application/json)

        {
          "weight": 10,
          "value": 100,
          "_id": "5adec3331441e2280493ec53",
          "dbname": "item-iron_helmet",
          "category": "gears"
        }

### update a base-item  [PATCH]

+ Request (application/json)

        {
          "$inc": {
            "weight": 15
          }
        }


+ Response 200 (application/json)

        {
          "message": "Successfully updated base-item item-iron_helmet",
          "status": "success",
          "id": "5adec3331441e2280493ec53"
        }

        {
          "message": "Failed to update base-item item-iron_helmet",
          "status": "failure",
          "id": null
        }


### delete a base-item  [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted base-item \"item-weapon-dragonbone_greatsword\"",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete base-item \"item-weapon-dragonbone_greatsword\"",
          "status": "failure",
          "id": null
        }

# Group Inv-items
物品栏操作。提供了Graph，只有在Graph中的操作为多数据集的操作，其余为单数据集操作。

## Router Index [/api/invItems/]

单物品栏数据集操作。

包括：
- 获取物品栏中所有物品(无条件 无投影 无分类)
- 物品栏增加物品
- 修改物品栏

### Get all inv-items  [GET]
+ Response 200 (application/json)

        [
          {
            "refs": [
              "5aea701ea23f7f0a92bc6b06",
              "5aea7104d8c9ef0d88a38ded",
              "5aea71e454dd080f632a9fd1"
            ],
            "_id": "5aea701ea23f7f0a92bc6b07",
            "item": "item-stimpack",
            "holder": "actor-testy"
          }
        ]

### Add an inv-item  [POST]

+ Request (application/json)

        {
          "item": "item-iron_helmet",
          "holder": "actor-testy",
          "refs": []
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new inv-item \"item-iron_helmet\" with id \"5aea74af54dd080f632a9fd2\"",
          "status": "success",
          "id": "5aea74af54dd080f632a9fd2"
        }

        {
          "message": "Failed to create new inv-item \"item-iron_helmet\"",
          "status": "failure",
          "id": null
        }

### update inv-items [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "holder": "actor-testy"
          },
          "token": {
            "holder": "actor-valorad"
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated selected inv-items",
          "status": "success",
          "altCount": 2
        }
        {
          "message": "Failed to update selected inv-items",
          "status": "failure",
          "altCount": 0
        }


## GraphQL [/api/invItems/graph]

增加、删除与查询玩家的物品栏。使用graphql，会涉及多个数据集。

### 【查】get inv-item List  [POST]
根据条件查询玩家的物品栏，返回列表

+ Request (application/json)

        {
            "graphql_Exp": "query getItems($conditions: JSON, $page: Int, $lang: String) { invItems(conditions: $conditions, page: $page, lang: $lang) { item, base { dbname, value, weight, category, detail }, holder, refDetails { refID, owner, num, item } } }",
            "graphql_Arg": {
              "conditions": "{\"holder\": \"actor-testy\"}",
              "lang": "zh"
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "invItems": [
              {
                "item": "item-stimpack",
                "base": {
                  "dbname": "item-stimpack",
                  "value": 110,
                  "weight": 1,
                  "category": "consumables",
                  "detail": {
                    "dbname": "item-stimpack",
                    "type": "type-potion",
                    "effects": [
                      "effect-resotre_health"
                    ],
                    "effectsI18n": [
                      {
                        "effect": "effect-resotre_health",
                        "name": ""
                      }
                    ]
                  }
                },
                "holder": "actor-testy",
                "refDetails": [
                  {
                    "refID": "5aea701ea23f7f0a92bc6b06",
                    "owner": "actor-testy",
                    "num": 1,
                    "item": "item-stimpack"
                  },
                  {
                    "refID": "5aea79650bc2c714001f852a",
                    "owner": "actor-testy",
                    "num": 10,
                    "item": "item-stimpack"
                  }
                ]
              },
              {
                "item": "item-iron_helmet",
                "base": {
                  "dbname": "item-iron_helmet",
                  "value": 100,
                  "weight": 25,
                  "category": "gears",
                  "detail": {
                    "dbname": "item-iron_helmet",
                    "rating": 10,
                    "type": "type-heavy_armor",
                    "equip": [
                      "equip-head"
                    ],
                    "effects": [],
                    "equipI18n": {},
                    "effectsI18n": []
                  }
                },
                "holder": "actor-testy",
                "refDetails": []
              }
            ]
          }
        }

### 【查】get an inv-item  [POST]
根据条件查询单件物品，返回单件物品

+ Request (application/json)

        {
            "graphql_Exp": "query getItem($itemName: String, $holder: String, $lang: String) { invItem(itemName: $itemName, holder: $holder, lang: $lang) { item, base { dbname, value, weight, category, detail }, holder, refDetails { refID, owner, num, item } } }",
            "graphql_Arg": {
              "itemName": "item-iron_helmet",
              "holder": "actor-testy"
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "invItem": {
              "item": "item-iron_helmet",
              "base": {
                "dbname": "item-iron_helmet",
                "value": 100,
                "weight": 25,
                "category": "gears",
                "detail": {
                  "dbname": "item-iron_helmet",
                  "rating": 10,
                  "type": "type-heavy_armor",
                  "equip": [
                    "equip-head"
                  ],
                  "effects": [],
                  "equipI18n": {},
                  "effectsI18n": []
                }
              },
              "holder": "actor-testy",
              "refDetails": []
            }
          }
        }
        
### 【增】Add item  [POST]
赠送玩家一件新物品

+ Request (application/json)

        {
          "graphql_Exp": "mutation addItem($itemName: String!, $holder: String!, $num: Int) { gift(itemName: $itemName, holder: $holder, num: $num) { item, holder, refs } }",
          "graphql_Arg": {
            "itemName": "item-stimpack",
            "holder": "actor-testy",
            "num": 5
          }
        }

+ Response 200 (application/json)

        {
          "data": {
            "gift": {
              "item": "item-stimpack",
              "holder": "actor-testy",
              "refs": [
                "5aea701ea23f7f0a92bc6b06",
                "5aea7104d8c9ef0d88a38ded",
                "5aea71e454dd080f632a9fd1"
              ]
            }
          }
        }

        
### 【删】Delete Inv-item [POST]
移除玩家物品

+ Request (application/json)

        {
            "graphql_Exp": "mutation removeItem($itemName: String!, $holder: String!, $num: Int) { remove(itemName: $itemName, holder: $holder, num: $num) { rmInvCount, rmRefCount } }",
            "graphql_Arg": {
              "itemName": "item-stimpack",
              "holder": "actor-testy",
              "num": 5
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "remove": {
              "rmInvCount": 0,
              "rmRefCount": 3
            }
          }
        }

## By holder [/api/invItems/holder/{dbname}]
基于holder的dbname的查询

### Get inv-items by holder dbname [GET]
+ Response 200 (application/json)

        [
          {
            "refs": [
              "5aea701ea23f7f0a92bc6b06",
              "5aea7104d8c9ef0d88a38ded",
              "5aea71e454dd080f632a9fd1",
              "5aea79650bc2c714001f852a"
            ],
            "_id": "5aea701ea23f7f0a92bc6b07",
            "item": "item-stimpack",
            "holder": "actor-testy",
          },
          {
            "refs": [],
            "_id": "5aea74af54dd080f632a9fd2",
            "item": "item-iron_helmet",
            "holder": "actor-testy",
          }
        ]

## By item [/api/item/{dbname}]
基于item的dbname的查询

### Get inv-items by item dbname [GET]

+ Response 200 (application/json)

        [
          {
            "refs": [],
            "_id": "5aea74af54dd080f632a9fd2",
            "item": "item-iron_helmet",
            "holder": "actor-testy"
          }
        ]

## By id [/api/id/{_id}]
基于id的直接查询

### Get an inv-item by id [GET]
+ Response 200 (application/json)

        {
          "refs": [
            "5aea928e6d352c218d1eaaa8"
          ],
          "_id": "5aea701ea23f7f0a92bc6b07",
          "item": "item-stimpack",
          "holder": "actor-testy"
        }

### Update an inv-item by id [PATCH]

+ Request (application/json)

        {
          "$set": {
              "holder": "actor-valorad"
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated actor-testy's inv-item item-stimpack",
          "status": "success",
          "id": "5aea701ea23f7f0a92bc6b07"
        }

        {
          "message": "Failed to update inv-item 5aea701ea23f7f0a92bc6b07",
          "status": "failure",
          "id": "5aea701ea23f7f0a92bc6b07"
        }

### Delete an inv-item by id [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted inv-item 5aea74af54dd080f632a9fd2",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete inv-item 5aea74af54dd080f632a9fd2",
          "status": "failure",
          "rmCount": 0
        }

# Group Books

## Router Index [/api/books/]

### Get all books [GET]

+ Response 200 (application/json)

        [
          {
            "_id": "5aeaa794c530502769e4656c",
            "dbname": "item-book-papyrus01",
            "content": "content-papyrus01"
          }
        ]

### Update books [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "dbname": "item-book-papyrus01",
          },
          "token": {
            "content": "content-papyrus01_cut"
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated selected books",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update selected books",
          "status": "failure",
          "altCount": 0
        }


### Add a new book [POST]

+ Request (application/json)

        {
          "dbname": "item-book-papyrus01",
          "content": "content-papyrus01"
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new book \"item-book-papyrus01\" with id \"5aeaa794c530502769e4656c\"",
          "status": "success",
          "id": "5aeaa794c530502769e4656c"
        }

        {
          "message": "Failed to create book \"item-book-papyrus01\"",
          "status": "failure",
          "id": null
        }

## By dbname [/api/books/dbname/{dbname}]

### Get a book [GET]

+ Response 200 (application/json)

        {
          "_id": "5aeaa794c530502769e4656c",
          "dbname": "item-book-papyrus01",
          "content": "content-papyrus01"
        }

### Update a book [PATCH]

+ Request (application/json)

        {
          "content": "content-papyrus01"
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated book item-book-papyrus01",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update book item-book-papyrus01",
          "status": "failure",
          "altCount": 0
        }

### Delete a book [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted book item-book-papyrus01",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete book item-book-papyrus01",
          "status": "failure",
          "rmCount": 0
        }

# Group Consumables

## Router Index [/api/consumables/]

### Get all consumables [GET]

+ Response 200 (application/json)

        [
          {
            "_id": "5aeaa794c530502769e4651d",
            "dbname": "item-consumable-titanV",
            "type": "grenade"
            "effects": []
          }
        ]

### Update consumables [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "dbname": "item-consumable-titanV",
          },
          "token": {
            "effects": ["effect-radiation"]
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated selected consumables",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update selected consumables",
          "status": "failure",
          "altCount": 0
        }


### Add a new consumable [POST]
+ Request (application/json)

        {
          "dbname": "item-consumable-titanV",
          "type": "grenade"
          "effects": []
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new consumable \"item-consumable-titanV\" with id \"5aeaa794c530502769e4651d\"",
          "status": "success",
          "id": "5aeaa794c530502769e4651d"
        }

        {
          "message": "Failed to create consumable \"item-consumable-titanV\"",
          "status": "failure",
          "id": null
        }


## By dbname [/api/consumables/dbname/{dbname}]

### Get a consumable [GET]

+ Response 200 (application/json)

        {
          "_id": "5aeaa794c530502769e4651d",
          "dbname": "item-consumable-titanV",
          "type": "grenade"
          "effects": []
        }

### Update a consumable [PATCH]

+ Request (application/json)

        {
          "type": "ammo"
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated consumable item-consumable-titanV",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update consumable item-consumable-titanV",
          "status": "failure",
          "altCount": 0
        }


### Delete a consumable [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted consumable item-consumable-titanV",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete consumable item-consumable-titanV",
          "status": "failure",
          "rmCount": 0
        }

# Group Gears

## Router Index [/api/gears/]

### Get all gears [GET]
+ Response 200 (application/json)

        [
          {
            "_id": "5aeaa794c530502769e4136c",
            "dbname": "item-daedric_armor",
            "rating": 75,
            "type": "type-heavy_armor",
            "effects": [],
            "equip": ["equip-body"]
          }
        ]

### Update gears [PATCH]
+ Request (application/json)

        {
          "conditions": {
            "dbname": "item-daedric_armor",
          },
          "token": {
            "$mul": {
              "rating": 2.0
            }
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated selected gears",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update selected gears",
          "status": "failure",
          "altCount": 0
        }

### Add a new gear [POST]
+ Request (application/json)

        {
          "dbname": "item-daedric_armor",
          "rating": 75,
          "type": "type-heavy_armor",
          "effects": [],
          "equip": ["equip-body"]
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new gear \"item-daedric_armor\" with id \"5aeaa794c530502769e4656c\"",
          "status": "success",
          "id": "5aeaa794c530502769e4136c"
        }

        {
          "message": "Failed to create gear \"item-daedric_armor\"",
          "status": "failure",
          "id": null
        }

## By dbname [/api/gears/dbname/{dbname}]

### Get a gear [GET]

+ Response 200 (application/json)

        {
          "_id": "5aeaa794c530502769e4136c",
          "dbname": "item-daedric_armor",
          "rating": 75,
          "type": "type-heavy_armor",
          "effects": [],
          "equip": ["equip-body"]
        }

### Update a gear [PATCH]

+ Request (application/json)

        {
          "type": "type-light_armor"
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated gear item-daedric_armor",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update gear item-daedric_armor",
          "status": "failure",
          "altCount": 0
        }

### Delete a gear [DELETE]
+ Response 200 (application/json)

        {
          "message": "Successfully deleted gear item-daedric_armor",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete gear item-daedric_armor",
          "status": "failure",
          "rmCount": 0
        }

# Group Ref-items

## Router Index [/api/refItems/]

### Get all ref-items [GET]

+ Response 200 (application/json)

        [
          {
            "num": 1,
            "_id": "5aea785aca198113080db4b5",
            "owner": "actor-testy",
            "item": "item-iron_helmet"
          }
        ]

### Update ref-items [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "item": "item-iron_helmet",
          },
          "token": {
            "$set": {
              "owner": "actor-valorad"
            }
          }
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated selected ref-items",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update selected ref-items",
          "status": "failure",
          "altCount": 0
        }

### Add a new ref-item [POST]

+ Request (application/json)

        {
          "item": "item-iron_helmet",
          "owner": "actor-testy",
          "num": 1
        }

+ Response 200 (application/json)

        {
          "message": "Successfully given actor-testy a new item-iron_helmet with id \"5aeaa793d530512769f4136c\"",
          "status": "success",
          "id": "5aeaa793d530512769f4136c"
        }

        {
          "message": "Failed to give actor-testy a new item-iron_helmet",
          "status": "failure",
          "id": null
        }

## By owner [/api/refItems/owner/{dbname}]

### Get ref-items by owner [GET]

+ Response 200 (application/json)

        [
          {
            "num": 1,
            "_id": "5aea785aca198113080db4b5",
            "owner": "actor-testy",
            "item": "item-iron_helmet"
          }
        ]

## By item [/api/refItems/item/{dbname}]

### Get ref-items by item [GET]

+ Response 200 (application/json)

        [
          {
            "num": 1,
            "_id": "5aea785aca198113080db4b5",
            "owner": "actor-testy",
            "item": "item-iron_helmet"
          }
        ]

## By id [/api/refItems/id/{_id}]

### Get a ref-item [GET]

+ Response 200 (application/json)

        {
          "num": 1,
          "_id": "5aea785aca198113080db4b5",
          "owner": "actor-testy",
          "item": "item-iron_helmet"
        }

### Update a ref-item [PATCH]

+ Request (application/json)

        {
          "owner": "actor-valorad"
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated ref-item item-iron_helmet",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update ref-item 5aea785aca198113080db4b5",
          "status": "failure",
          "altCount": 0
        }

### Delete a ref-item [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted ref-item 5aea785aca198113080db4b5",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete ref-item 5aea785aca198113080db4b5",
          "status": "failure",
          "rmCount": 0
        }

# Group Translations

## Router Index [/api/translations/]

### Get all translations [GET]

+ Response 200 (application/json)

        [
          {
            "_id": "5aeaa794c530543769e4657b",
            "dbname": "item-daedric_armor",
            "name": {
              "en": "Daedric armor",
              "zh": "魔族护甲"
            }
            "description": {
              "en": "A well crafted daedric armor, usually worn by fearsome daedric warriors",
              "zh": "质地良好的魔族护甲，常见由可怕的魔族战士装备"
            }
          }
        ]
        
### Update translations [PATCH]

+ Request (application/json)

        {
          "conditions": {
            "dbname": "item-daedric_armor",
          },
          "token": {
            "name.en": "Daedric basic armor"
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully updated selected translations",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update selected translations",
          "status": "failure",
          "altCount": 0
        }
        
### Add a new translation [POST]

+ Request (application/json)

        {
          "dbname": "item-daedric_armor",
          "name": {
            "en": "Daedric armor",
            "zh": "魔族护甲"
          }
          "description": {
            "en": "A well crafted daedric armor, usually worn by fearsome daedric warriors",
            "zh": "质地良好的魔族护甲，常见由可怕的魔族战士装备"
          }
        }

+ Response 200 (application/json)

        {
          "message": "Successfully created new translation of \"item-daedric_armor\" with id \"5aeaa794c530543769e4657b\"",
          "status": "success",
          "id": "5aeaa794c530543769e4657b"
        }

        {
          "message": "Failed to create translation of \"item-daedric_armor\"",
          "status": "failure",
          "id": null
        }
        
## By dbname [/api/translations/dbname/{dbname}]

### Get a translation [GET]

+ Response 200 (application/json)

        {
          "_id": "5aeaa794c530543769e4657b",
          "dbname": "item-daedric_armor",
          "name": {
            "en": "Daedric armor",
            "zh": "魔族护甲"
          },
          "description": {
            "en": "A well crafted daedric armor, usually worn by fearsome daedric warriors",
            "zh": "质地良好的魔族护甲，常见由可怕的魔族战士装备"
          }
        }

### Update a translation [PATCH]

+ Request (application/json)

        {
          "description": {}
        }
        
+ Response 200 (application/json)

        {
          "message": "Successfully updated translation of item-daedric_armor",
          "status": "success",
          "altCount": 1
        }

        {
          "message": "Failed to update translation of item-daedric_armor",
          "status": "failure",
          "altCount": 0
        }

### Delete a translation [DELETE]

+ Response 200 (application/json)

        {
          "message": "Successfully deleted translation of item-daedric_armor",
          "status": "success",
          "rmCount": 1
        }

        {
          "message": "Failed to delete translation of item-daedric_armor",
          "status": "failure",
          "rmCount": 0
        }