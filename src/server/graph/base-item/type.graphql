scalar JSON

type BaseItem {
  dbname: String
  value: Int
  weight: Float
  category: String
  detail: JSON
}

# type Gear {
#   rating: Int
#   type: String
#   equip: String
#   effects: [String]
# }

# type Consumable {
#   type: String
#   effects: [String]
# }

# type Book {
#   content: String
# }

# union Detail = Gear | Consumable | Book

type AddCallback {
  message: String
  status: String
  id: ID
}

type DeleteCallback {
  message: String
  status: String
  rmCount: Int
}

input newBaseItem {
  dbname: String
  value: Int
  weight: Float
  category: String
  detail: newDetail
}

input newDetail {
  # gear + comsumable
  rating: Int
  type: String
  equip: String
  effects: [String]
  # book
  content: String
}

type Query {
  baseItem(dbname: String): BaseItem
  baseItems(conditions: JSON, page: Int): [BaseItem]
}

type Mutation {
  add(input: newBaseItem): AddCallback
  delete(conditions: JSON): DeleteCallback
}

